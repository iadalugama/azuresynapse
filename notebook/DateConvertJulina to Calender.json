{
	"name": "DateConvertJulina to Calender",
	"properties": {
		"folder": {
			"name": "DateConverstionUtils"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spTestPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "65456dc0-8a24-4e59-9c15-2cf9096f60cc"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/e9aa988f-db1f-4fa2-bd6b-6a6853391c6d/resourceGroups/test-synapse/providers/Microsoft.Synapse/workspaces/test-synapse-ws-01/bigDataPools/spTestPool",
				"name": "spTestPool",
				"type": "Spark",
				"endpoint": "https://test-synapse-ws-01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spTestPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"%run DateConverstionUtils/ConvertUtil"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pyspark.sql.functions as F\r\n",
					"from datetime import datetime\r\n",
					"data = [\r\n",
					"  ('George', '75001', 4),\r\n",
					"  ('Andrew', '75001', 5),\r\n",
					"  ('Micheal', '75001', 2),\r\n",
					"  ('Maggie','75001' , 8),\r\n",
					"  ('Ravi', '75001', 2),\r\n",
					"  ('Xien', '75001', 3),\r\n",
					"]\r\n",
					" \r\n",
					"df = sqlContext.createDataFrame(data, ['name', 'birthdaytime', 'grad_Score'])\r\n",
					"df.show(truncate=False)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df = df.withColumn('julian_date', lit(75001))\r\n",
					"ct=CommonTransforms(df)\r\n",
					"\r\n",
					"output = ct.julian_to_calendar(\"julian_date\")\r\n",
					"display(output)\r\n",
					"#df.show(truncate=False)"
				],
				"execution_count": 33
			}
		]
	}
}